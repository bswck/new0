[build-system]
requires = ["hatchling>=1.27.0"]
build-backend = "hatchling.build"

[project]
name = "new0"
readme = "README.md"
description = "New REPL backport for Python 0.9.1"
authors = [{ name = "Bartosz SÅ‚awecki", email = "bartosz@ilikepython.com" }]
requires-python = ">=3.13"
dependencies = []
version = "0.1.0"

[dependency-groups]
dev = ["mypy>=1.13.0", "pre-commit>=4.2.0", "ruff>=0.11.8"]
test = ["pytest>=8.3.4"]

[tool.uv]
required-version = "~=0.8.3"
default-groups = ["dev", "test"]

[tool.mypy]
strict = true
explicit_package_bases = true
exclude = ["build/", "docs/"]
disable_error_code = ["import-untyped", "no-any-return"]

[tool.pytest.ini_options]
pythonpath = "."
addopts = ["--import-mode=importlib", "--doctest-modules"]

[tool.ruff.lint]
exclude = ["**samples/**"]
select = ["ALL"]
ignore = [
    # Description: Dynamically typed expressions (typing.Any) are disallowed
    # Rationale:
    #  We use Any to allow user to constrain return types of our functions on their own.
    #  For example, having a function `def foo() -> Any: ...` allows user to write
    #  `my_foo: int = foo()` and have it passed type checking, since `Any` as a gradual
    #  form is assignable to any type
    "ANN401",

    # Description: 1 blank line required before class docstring
    # Rationale: Remove the warning -- D211 (no-blank-line-before-class) preferred
    "D203",

    # Description: Multi-line docstring summary should start at the second line
    # Rationale: Remove the warning -- D213 (multi-line-summary-second-line) preferred
    "D212",

    # Description: Line contains TODO, consider resolving the issue
    # Rationale: Not appropriate for the project
    "FIX002",

    # Description: Implicitly concatenated string literals on one line
    # Rationale: Conflicts with the formatter
    "ISC001",

    # Description: Function is too complex
    # Rationale: Marginal importance
    "C901",

    # Description: Trailing comma missing
    # Rationale: Conflicts with the formatter
    "COM812",

    # Description: File is part of an implicit namespace package. Add an `__init__.py`
    # Rationale: Implicit namespace packages are a feature
    "INP001",

    # Description: Missing documentation
    # Rationale: Important, but secondary concern
    "D100", # Public module
    "D101", # Public class
    "D102", # Public method
    "D103", # Public function
    "D104", # Public package
    "D105", # Magic method
    "D107", # __init__

    # Description: Use of `assert` detected
    # Rationale: Assertions aren't bad and can be disabled with `python -O`
    "S101",

    # Description: Missing issue link on the line following this TODO
    # Rationale: Own semantics
    "TD003",

    # Description: Wildcard imports used
    # Rationale: Waiting for red knot to understand them
    "F403",

    # Description: Move third-party import into a type-checking block
    # Rationale: Start-up time is not yet that important
    "TC",

    # Description: Private member accessed
    # Rationale: In reality, this check causes more trouble than prevents bad things
    "SLF001",
]
